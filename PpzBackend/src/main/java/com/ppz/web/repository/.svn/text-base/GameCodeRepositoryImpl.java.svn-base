package com.ppz.web.repository;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.ppz.web.component.GameCodeComponent;
import com.ppz.web.entity.GameCode;

@Repository(value = "gameCodeRepository")
public class GameCodeRepositoryImpl extends AbstractRepository<GameCode, Long> implements GameCodeRepository {

	@Autowired
	private GameCodeComponent gameCodeComponent;

	@Override
	public void createGameCode(GameCode gameCode) {

		if (gameCode != null) {

			// for case that code is null we will create new unique one
			if (gameCode.getCode() == null) {
				String newUniqueCode = gameCodeComponent.generateUniqueGameCode();
				gameCode.setCode(newUniqueCode);
			}

			this.getTemplate().persist(gameCode);
		}

	}

	@Override
	public void updateGameCode(GameCode gameCode) {
			this.getTemplate().merge(gameCode);
	}
	
	@Override
	public List<GameCode> getGameCodeList() {
		return this.getTemplate().loadAll(GameCode.class);
	}

	@Override
	public GameCode getGameCode(Long gameCodeId) {
		return this.getTemplate().get(GameCode.class, gameCodeId);
	}

	@Override
	public GameCode getGameCode(String gameCode) {
		if (gameCode == null || "".equals(gameCode)) {
			return null;
		}
		DetachedCriteria crit = DetachedCriteria.forClass(GameCode.class).add(Restrictions.eq("code", gameCode));
		@SuppressWarnings("rawtypes")
		List results = getTemplate().findByCriteria(crit);
		if (results.size() != 0) {
			return (GameCode) results.get(0);
		} else {
			return null;
		}
	}

	@Override
	public Class<GameCode> getType() {
		return GameCode.class;
	}

}
