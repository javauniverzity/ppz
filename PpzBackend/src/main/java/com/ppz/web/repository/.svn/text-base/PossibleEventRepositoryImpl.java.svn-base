package com.ppz.web.repository;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.ppz.web.entity.PossibleEvent;

@Repository(value = "possibleEventRepository")
public class PossibleEventRepositoryImpl extends AbstractRepository<PossibleEvent, Long> implements PossibleEventRepository {

	public Class<PossibleEvent> getType() {
		return PossibleEvent.class;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<PossibleEvent> getPossibleEventList(Integer rootDecision, Integer decisionType) {
		DetachedCriteria crit = DetachedCriteria.forClass(PossibleEvent.class).add(Restrictions.eq("rootDecision", rootDecision));
		crit.add(Restrictions.eq("decisionType", decisionType));
		@SuppressWarnings("rawtypes")
		List results = getTemplate().findByCriteria(crit);
		if (results.size() != 0) {
			return (List<PossibleEvent>) results;
		} else {
			return null;
		}
	}

}
