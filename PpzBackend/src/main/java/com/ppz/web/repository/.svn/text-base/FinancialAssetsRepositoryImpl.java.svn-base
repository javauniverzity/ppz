package com.ppz.web.repository;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.ppz.web.entity.Avatar;
import com.ppz.web.entity.FinancialAssets;

@Repository(value = "financialAssetsRepository")
public class FinancialAssetsRepositoryImpl extends AbstractRepository<FinancialAssets, Long> implements FinancialAssetsRepository {

	@Override
	public void createFinancialAssets(FinancialAssets financialAssets) {
		getTemplate().persist(financialAssets);
	}

	@Override
	public FinancialAssets updateFinancialAssets(FinancialAssets financialAssets) {
		return getTemplate().merge(financialAssets);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<FinancialAssets> getFinancialAssetsByAvatar(Avatar avatar) {
		DetachedCriteria crit = DetachedCriteria.forClass(FinancialAssets.class).add(Restrictions.eq("avatar", avatar));
		@SuppressWarnings("rawtypes")
		List results = getTemplate().findByCriteria(crit);
		if (results.size() != 0) {
			return (List<FinancialAssets>) results;
		} else {
			return null;
		}
	}

	@Override
	public Class<FinancialAssets> getType() {
		return FinancialAssets.class;
	}

}
